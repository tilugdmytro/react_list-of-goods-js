{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_BY_LENGTH","SORT_FIELD_ALPHABETICALLY","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","length","localeCompare","reverse","getPreparedGoods","arr1","arr2","className","type","cn","onClick","every","el","i","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAuB,WACvBC,EAA4B,iBA2B3B,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA7BR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,OAASD,EAAMC,OAE9B,KAAKb,EACH,OAAOW,EAAMG,cAAcF,GAE7B,QACE,OAAO,MAKXP,GACFI,EAAcM,UAGTN,EAOcO,CACnBlB,EACA,CAAEK,YAAWE,eAOf,IAJyBY,EAAMC,EAa/B,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SAAU,UACX,CAAE,WAAYlB,IAAcH,IAEhCsB,QAAS,kBAAMlB,EAAaJ,IAN9B,iCAWA,wBACEoB,KAAK,SACLD,UACEE,IAAG,SAAU,aACX,CAAE,WAAYlB,IAAcJ,IAEhCuB,QAAS,kBAAMlB,EAAaL,IAN9B,4BAWA,wBACEqB,KAAK,SACLD,UACEE,IAAG,SAAU,aACX,CAAE,YAAahB,IAEnBiB,QAnCc,WACpBhB,GAAeD,IA4BX,sBAtCmBY,EAiDFV,EAjDQW,EAiDMpB,GAhD3BmB,EAAKM,OAAM,SAACC,EAAIC,GAAL,OAAWD,IAAON,EAAKO,OAiDpC,wBACEL,KAAK,SACLD,UAAU,4BACVG,QAjDI,WACZlB,EAAa,IACbE,GAAc,IA4CR,uBAWJ,6BACGC,EAAamB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCnHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4295d924.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_BY_LENGTH = 'byLength';\nconst SORT_FIELD_ALPHABETICALLY = 'alphabetically';\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_BY_LENGTH:\n          return good1.length - good2.length;\n\n        case SORT_FIELD_ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  function isOriginalOrder(arr1, arr2) {\n    return !arr1.every((el, i) => el === arr2[i]);\n  }\n\n  const reset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  const toggleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-info',\n              { 'is-light': sortField !== SORT_FIELD_ALPHABETICALLY })\n          }\n          onClick={() => setSortField(SORT_FIELD_ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-success',\n              { 'is-light': sortField !== SORT_FIELD_BY_LENGTH })\n          }\n          onClick={() => setSortField(SORT_FIELD_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-warning',\n              { 'is-light': !isReversed })\n          }\n          onClick={toggleReverse}\n        >\n          Reverse\n        </button>\n\n        {isOriginalOrder(visibleGoods, goodsFromServer) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}